// BBS Framework Example: example.if
// Purpose: Defines detailed content for sections laid out by .fold files.
// This file uses the user's specific symbol-based syntax for content creation.
// It would be parsed by the BBS rendering engine.

// --- IF Header ---
// ContextID: main_content_area // ID matching a section in a .fold file this content populates
// DataSources: [ "ifb:user/profile", "ifb:dashboard/stats" ] // Optional: data to fetch from IFB

// --- Content Definition using User's Syntax ---

// Section 1: Welcome Message and User Info
// !this is the way to input txt!
!Welcome to your Personalized BinaryBlocksphere Dashboard!

@user_greeting_context@ // Placeholder for dynamic text, e.g., "Hello, [Username]!" - resolved by PMF or data binding

// *this*
// *is how*
// *you input text*
// *with in the same*
// *design but want iit to be on different lines*
*This is your central hub for all BBS activities.*
*Monitor system status, launch applications,*
*and manage your bidirectional binary projects.*
*Current Bidibi Time Sync: ACTIVE*

// #this is the way to define or input a path to an object and object in this order shape color size#
#user_avatar { path: "PAX:avatars/default_user.png"; shape: circle; size: 80px 80px; border: "2px solid {var_accent_color}"; }
// Note: "PAX:" is a conceptual prefix for the BBS assets directory.
// {var_accent_color} is a theme variable.

// --- Section 2: Quick Stats Display ---
// @this is section twos context@
@dashboard_stats_section_title_context@ // Placeholder for "Quick Stats"

// •this is •how you define•
// •what goes in•to a container together•
// •like this would be equial blocks shapes•of 2 columns and 3 rows•
• // Start of a container definition for stats (conceptual grid layout, e.g. 2x2)
  // Item 1
  • // Inner container for a single stat
    #active_projects_icon { path: "PAX:icons/projects.svg"; shape: icon; color: "{var_primary_color}"; size: 24px 24px; }
    !Active Projects!
    @active_projects_count_context@ // Placeholder, e.g., "5"
  • // End inner container
  // Item 2
  •
    #storage_icon { path: "PAX:icons/storage.svg"; shape: icon; color: "{var_primary_color}"; size: 24px 24px; }
    !PEPX Storage Used!
    @pepx_storage_usage_context@ // Placeholder, e.g., "250.7 GBBS / 1024 GBBS"
  •
  // Item 3
  •
    #running_processes_icon { path: "PAX:icons/cpu.svg"; shape: icon; color: "{var_primary_color}"; size: 24px 24px; }
    !Running Bidibi Processes!
    @running_processes_count_context@ // Placeholder, e.g., "12"
  •
  // Item 4
  •
    #system_alerts_icon { path: "PAX:icons/alert.svg"; shape: icon; color: "{var_warning_color}"; size: 24px 24px; }
    !System Alerts!
    @system_alerts_count_context@ // Placeholder, e.g., "0"
  •
• // End of stats container

// --- Section 3: Action Buttons ---
// @this would be sectiion 3@
@quick_actions_section_title_context@ // Placeholder for "Quick Actions"

// [this is how you define what a button reads]
// [(when you want a button)to populate a specific item or set of items(by refrencencing the item likethis)}
// [(buttonH°{number of px} for height)path/to/assets/if,same,folder,only,one,path,refrence,needed,items,file,name,only,ext,type,not,needed,_this is the item showin on load_,if,more,then,one,seperate,seperat,by,commas,with,no,space(W°px/button)]

// Button 1: Launch Terminal
[Launch OSbidibi Terminal]
( (buttonH°40px) // Conceptual height property
  (action: "launch_app") // Action type for PMF
  (targetApp: "osbidibiShell") // Target app ID for PMF
  (icon: "PAX:icons/terminal.svg") // Optional icon for the button
  (styleClass: "primary_button_style_from_pxr") // PXR class for styling
(W°auto/button) ) // Conceptual width property

// Button 2: Open Projects Folder (conceptual action for File Manager)
[Open My Projects]
( (buttonH°40px)
  (action: "open_vfs_path")
  (targetPath: "/home/user/projects")
  (icon: "PAX:icons/folder_open.svg")
  (styleClass: "secondary_button_style_from_pxr")
(W°auto/button) )

// Button 3: Placeholder for a button that shows an image (from user's syntax)
[(Show System Diagram)get.PXfrom.assetsname(BBS_System_Architecture_Diagram)]
( (buttonH°40px)
  (action: "show_image_popover") // PMF handles this action
  (imageAsset: "PAX:diagrams/BBS_System_Architecture_Diagram.png") // Referenced asset
  (styleClass: "info_button_style_from_pxr")
(W°auto/button) )


// {this means variable}{if more then one object could popualte}{this is how you define the pbjects that can populate}
// Example: A dynamic list based on fetched data
{latest_notifications_list} // Variable name for a list container
{notification_item} // Template for a single item in the list
{system_alert_item, user_message_item} // Possible object types that can populate this list

// -this-is-how-you-put-define-what-something-means-example
// -max-height= {}px // This seems like a way to define CSS properties directly or set variables.
// -button_primary_color = {var_accent_theme_color}

// *this is how you*name*
// *menus*or tabs if more the one*
// *in the *order from left to rigjht*or*top*to bottom
// This syntax would likely be used in a .fold file or a specific menu component definition,
// rather than general content flow of an .if file. E.g.
// $main_navigation_tabs { type: horizontal_tabs; styleRef: "main_nav_tabs.pxr"; }
// *Dashboard* // Item 1
// *Projects*   // Item 2
// *Settings*   // Item 3
// $end_main_navigation_tabs

// Notes on .if:
// - Focuses on detailed content using the specialized symbol syntax.
// - Parsed to generate HTML-like structures or component trees for the BBS renderer.
// - Uses placeholders (@context_name@) for dynamic data that would be filled by PMF logic or data binding.
// - References assets (PAX:...) and PXR styles.
// - The button syntax is quite complex and implies a specific parser for its properties and actions.
